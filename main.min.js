document.addEventListener('DOMContentLoaded', function() {
  const SHEET_API = 'https://script.google.com/macros/s/AKfycbzigzh2j9yMyi_CbqFXMZLeWkCsqqerRPc9sxoAFJCnVRDyf37Og-IuuYmdlN1XTny6zA/exec';
  const GRID_GEOJSON = 'grid.geojson';
  const TOWNS_GEOJSON = 'towns.geojson';

  let sheetData = [];
  let gridData = null;
  let townsData = null;
  let map, gridLayer, townsLayer;
  let checkpointData = null;
  let checkpointLayer = null;
  let stateLayer, districtLayer;

  // 1. Initialize map
  if (document.getElementById('map')) {
    // Define base layers
    var osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 18,
      attribution: '© OSM'
    });

    var satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
      maxZoom: 18,
      attribution: 'Tiles © Esri'
    });

    var terrain = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
      maxZoom: 17,
      attribution: '© OpenTopoMap'
    });

    // Initialize map with default layer
    map = L.map('map', {
      center: [23.975, 72.365],
      zoom: 8,
      layers: [osm]
    });

    // Add layer control
    var baseLayers = {
      "Map": osm,
      "Satellite": satellite,
      "Terrain": terrain
    };
    L.control.layers(baseLayers).addTo(map);

    // Load state and district outlines
    Promise.all([
      fetch('state.geojson').then(r => r.json()),
      fetch('District.geojson').then(r => r.json())
    ]).then(function([stateData, districtData]) {
      stateLayer = L.geoJSON(stateData, {
        style: { color: '#222', weight: 3, fillOpacity: 0 }
      });
      districtLayer = L.geoJSON(districtData, {
        style: { color: '#e85a8b', weight: 2, fillOpacity: 0 }
      });

      // Add overlays to map control
      var overlays = {
        "State Outline": stateLayer,
        "District Outline": districtLayer
      };
      L.control.layers(baseLayers, overlays).addTo(map);

      // Optionally add them to map by default:
      stateLayer.addTo(map);
      districtLayer.addTo(map);
    });
  }

  // 2. Fetch data and populate dropdown
  Promise.all([
    fetch(SHEET_API).then(r => r.json()),
    fetch(GRID_GEOJSON).then(r => r.json()),
    fetch(TOWNS_GEOJSON).then(r => r.json())
  ]).then(function([sheet, grid, towns]) {
    sheetData = sheet;
    gridData = grid;
    townsData = towns;

    // Add towns layer to map
    if (map && townsData) {
      townsLayer = L.geoJSON(townsData, {
        style: { color: '#007bff', weight: 2, fillOpacity: 0 }
      }).addTo(map);
      map.fitBounds(townsLayer.getBounds());
    }

    // Populate dropdown
    var select = document.getElementById('townSelect');
    if (select) {
      // Remove old options except the first
      while (select.options.length > 1) select.remove(1);
      let towns = [...new Set(sheetData.map(row => row.Town).filter(Boolean))];
      towns.forEach(function(town) {
        var opt = document.createElement('option');
        opt.value = town;
        opt.textContent = town;
        select.appendChild(opt);
      });

      select.addEventListener('change', function() {
        var town = this.value;
        // Show town name
        var titleDiv = document.getElementById('sideTownTitle');
        if (titleDiv) {
          titleDiv.style.display = town ? 'block' : 'none';
          titleDiv.textContent = town;
        }

        // Show table for selected town
        var detailsDiv = document.getElementById('sheetDetails');
        if (detailsDiv) {
          if (!town) {
            detailsDiv.innerHTML = '';
            return;
          }
          var row = sheetData.find(r => r.Town === town);
          if (row) {
            detailsDiv.innerHTML = `
              <table class="table table-bordered table-striped mb-0" style="background:#fff;">
                <tbody>
                  <tr><th>District</th><td>${row.DISTRICT||''}</td></tr>
                  <tr><th>Tehsil</th><td>${row.TEHSIL||''}</td></tr>
                  <tr><th>KML Area</th><td>${row["KML Area"]||''}</td></tr>
                  <tr><th>Sheet 2K Area</th><td>${row["Sheet 2K Area"]||''}</td></tr>
                  <tr><th>2K Sheets</th><td>${row["2K Sheets"]||''}</td></tr>
                </tbody>
              </table>
            `;
          } else {
            detailsDiv.innerHTML = '<div class="text-muted">No data for this town.</div>';
          }
        }

        // Show grid layer for selected town
        if (map && gridData) {
          if (gridLayer) map.removeLayer(gridLayer);
          let features = gridData.features.filter(f => f.properties.Town === town);
          if (features.length) {
            gridLayer = L.geoJSON({type:'FeatureCollection',features:features}, {
              style: {color:'yellow',weight:2,fillOpacity:0}
            }).addTo(map);
            map.fitBounds(gridLayer.getBounds());
          }
        }

        // Show Timeline Milestones for selected town
        var timelineDiv = document.getElementById('milestoneTimeline');
        if (timelineDiv) {
          timelineDiv.innerHTML = '';
          if (town) {
            var row = sheetData.find(r => r.Town === town);
            if (row) {
              // Adjust these keys to match your actual sheet column names
              var milestones = [
                { label: 'Checkpoint Planning', value: row['Checkpoint Planning'] },
                { label: 'Plan received from Firm', value: row['Plan received from Firm'] },
                { label: 'Plan Approved', value: row['Plan Approved'] },
                { label: '1st Milstone', value: row['1st Milstone'] },
                { label: '2nd Milestone Target', value: row['2nd Milestone Target'] }
              ].filter(m => m.value);

              if (milestones.length) {
                timelineDiv.innerHTML = '<ul class="timeline">';
                milestones.forEach(function(m) {
                  timelineDiv.innerHTML += `<li class="timeline-item"><span class="timeline-marker"></span><div class="timeline-content"><span class="timeline-title">${m.label}</span>: <span class="timeline-date">${m.value}</span></div></li>`;
                });
                timelineDiv.innerHTML += '</ul>';
              } else {
                timelineDiv.innerHTML = '<div class="text-muted">No milestones for this town.</div>';
              }
            } else {
              timelineDiv.innerHTML = '<div class="text-muted">No milestones for this town.</div>';
            }
          }
        }

        // Show checkpoints for selected town
        if (map && checkpointData) {
          if (checkpointLayer) map.removeLayer(checkpointLayer);
          if (town) {
            let features = checkpointData.features.filter(f => f.properties.ULB === town);
            if (features.length) {
              checkpointLayer = L.geoJSON({type:'FeatureCollection',features:features}, {
                pointToLayer: function(feature, latlng) {
                  return L.circleMarker(latlng, {
                    radius: 6,
                    fillColor: "#e85a8b",
                    color: "#6a1b9a",
                    weight: 2,
                    opacity: 1,
                    fillOpacity: 0.7
                  }).bindPopup(
                    `<b>Town:</b> ${feature.properties.ULB}<br><b>S_No:</b> ${feature.properties.S_No}`
                  );
                }
              }).addTo(map);
            }
          }
        }
      });
    }

    // Summary cards for milestones (with increased length and click filter)
    var summaryDiv = document.getElementById('summaryCards');
    if (summaryDiv) {
      summaryDiv.innerHTML = '';
      // Total towns
      var totalTowns = sheetData.length;

      // Milestone columns
      var milestoneCols = [
        { key: 'Checkpoint Planning', icon: 'fas fa-flag-checkered', color: 'bg-warning' },
        { key: 'Plan received from Firm', icon: 'fas fa-file-alt', color: 'bg-primary' },
        { key: 'Plan Approved', icon: 'fas fa-check', color: 'bg-success' },
        { key: '1st Milestone', icon: 'fas fa-trophy', color: 'bg-info' },
        { key: '2nd Milestone Target', icon: 'fas fa-bullseye', color: 'bg-danger' }
      ];

      // Count for each milestone (non-empty)
      var milestoneCards = milestoneCols.map((m, idx) =>
        `<div class="col-md-4 mb-3">
          <div class="info-box ${m.color} milestone-card" data-milestone="${m.key}" style="cursor:pointer; min-height:110px;">
            <span class="info-box-icon" style="height:110px;line-height:110px;font-size:2.5rem;"><i class="${m.icon}"></i></span>
            <div class="info-box-content" style="min-height:110px;display:flex;flex-direction:column;justify-content:center;">
              <span class="info-box-text" style="font-size:1.1em">${m.key}</span>
              <span class="info-box-number" style="font-size:2em">${sheetData.filter(row => row[m.key]).length}</span>
            </div>
          </div>
        </div>`
      ).join('');

      summaryDiv.innerHTML = `
        <div class="col-md-4 mb-3">
          <div class="info-box bg-info milestone-card" data-milestone="ALL" style="cursor:pointer; min-height:110px;">
            <span class="info-box-icon" style="height:110px;line-height:110px;font-size:2.5rem;"><i class="fas fa-city"></i></span>
            <div class="info-box-content" style="min-height:110px;display:flex;flex-direction:column;justify-content:center;">
              <span class="info-box-text">Total Towns</span>
              <span class="info-box-number" style="font-size:2em">${totalTowns}</span>
            </div>
          </div>
        </div>
        ${milestoneCards}
      `;

      // Card click event to filter table
      setTimeout(function() {
        var cards = document.querySelectorAll('.milestone-card');
        cards.forEach(function(card) {
          card.onclick = function() {
            // Only highlight the selected card, do not render table
            cards.forEach(c => c.classList.remove('selected'));
            this.classList.add('selected');
          };
        });
        // Optionally, highlight the first card
        var firstCard = document.querySelector('.milestone-card[data-milestone="ALL"]');
        if(firstCard) firstCard.classList.add('selected');
      }, 100);
    }
  });

  setTimeout(function() {
    var cards = document.querySelectorAll('.milestone-card');
    cards.forEach(function(card) {
      card.onclick = function() {
        var milestone = this.getAttribute('data-milestone');
        cards.forEach(c => c.classList.remove('selected'));
        this.classList.add('selected');
        // Always show and render the table for any card selection
        if (milestone && milestone !== 'ALL') {
          renderFilteredTable(milestone);
          document.getElementById('tableRow').style.display = '';
        } else if (milestone === 'ALL') {
          // For "ALL", show all towns with all milestone columns
          renderAllTable();
          document.getElementById('tableRow').style.display = '';
        }
      };
    });
    // Show "ALL" table by default
    var firstCard = document.querySelector('.milestone-card[data-milestone="ALL"]');
    if (firstCard) {
      firstCard.classList.add('selected');
      renderAllTable();
      var tableRow = document.getElementById('tableRow');
      if (tableRow) tableRow.style.display = '';
    }
  }, 100);

  // Show filtered table for a milestone
  function renderFilteredTable(milestoneKey) {
    var table = document.getElementById('filteredDataTable');
    if (table && milestoneKey) {
      // Set columns in required order
      let columns = ['Sl no', 'DISTRICT', 'TEHSIL', milestoneKey];
      var thead = '<tr>' + columns.map(c => `<th>${c}</th>`).join('') + '</tr>';
      // Filter rows where the milestone column is non-blank
      var filtered = sheetData.filter(row => row[milestoneKey] && String(row[milestoneKey]).trim() !== '');
      var tbody = filtered.map((row, idx) =>
        `<tr>
          <td>${idx + 1}</td>
          <td>${row['DISTRICT'] || ''}</td>
          <td>${row['TEHSIL'] || ''}</td>
          <td>${row[milestoneKey] || ''}</td>
        </tr>`
      ).join('');
      if (!filtered.length) {
        tbody = `<tr><td colspan="${columns.length}" class="text-center text-muted">No data available</td></tr>`;
      }
      table.querySelector('thead').innerHTML = thead;
      table.querySelector('tbody').innerHTML = tbody;
      // Re-initialize DataTable
      if (window.jQuery && $(table).DataTable) {
        if ($.fn.dataTable.isDataTable(table)) {
          $(table).DataTable().clear().destroy();
        }
        $(table).DataTable({responsive:true});
      }
    }
  }

  // Show all towns with all milestone columns for "ALL" card
  function renderAllTable() {
    var table = document.getElementById('filteredDataTable');
    if (table) {
      let columns = ['Sr No', 'DISTRICT', 'TEHSIL', 'Checkpoint Planning', 'Plan received from Firm', 'Plan Approved', '1st Milestone', '2nd Milestone Target'];
      var thead = '<tr>' + columns.map(c => `<th>${c}</th>`).join('') + '</tr>';
      var tbody = sheetData.map((row, idx) =>
        `<tr>
          <td>${idx + 1}</td>
          <td>${row['DISTRICT'] || ''}</td>
          <td>${row['TEHSIL'] || ''}</td>
          <td>${row['Checkpoint Planning'] || ''}</td>
          <td>${row['Plan received from Firm'] || ''}</td>
          <td>${row['Plan Approved'] || ''}</td>
          <td>${row['1st Milestone'] || ''}</td>
          <td>${row['2nd Milestone Target'] || ''}</td>
        </tr>`
      ).join('');
      if (!sheetData.length) {
        tbody = `<tr><td colspan="${columns.length}" class="text-center text-muted">No data available</td></tr>`;
      }
      table.querySelector('thead').innerHTML = thead;
      table.querySelector('tbody').innerHTML = tbody;
      // Re-initialize DataTable
      if (window.jQuery && $(table).DataTable) {
        if ($.fn.dataTable.isDataTable(table)) {
          $(table).DataTable().clear().destroy();
        }
        $(table).DataTable({responsive:true});
      }
    }
  }

  // Load checkpoint.geojson once
  fetch('checkpoint.geojson')
    .then(response => response.json())
    .then(data => {
      checkpointData = data;
    });
});